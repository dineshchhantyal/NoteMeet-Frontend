generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  storageId             String?                @unique
  createdAt             DateTime               @default(now())
  activeSubscriptions   Subscription[]         @relation("ActiveUserSubscription")
  twoFactorConfirmation TwoFactorConfirmation?
  accounts              Account[]
  meetings              Meeting[]
  sessions              Session[]
  storage               UserStorage?           @relation(fields: [storageId], references: [userId])
  emailNotifications    Boolean   @default(true)
  newsletterSubscribed  Boolean   @default(false)
  lastLogin             DateTime?

  @@map("users")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_tokens")
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("two_factor_tokens")
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Meeting {
  id              String         @id @default(cuid())
  title           String
  date            DateTime
  time            String
  duration        Float          @default(30)
  description     String?
  provider        String
  meetingLink     String
  status          Int            @default(1)
  awsSchedulerArn String?
  awsJobId        String?
  transcriptUrl   String?
  transcriptKey   String?
  videoKey        String?
  summary         Json?
  userId          String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  notification    Notification?
  participants    Participant[]
  shares          MeetingShare[]
  createdBy       User           @relation(fields: [userId], references: [id])

  @@map("meetings")
}

model Participant {
  id        String   @id @default(cuid())
  email     String
  meetingId String?
  meeting   Meeting? @relation(fields: [meetingId], references: [id], onDelete: Cascade)
}

model Notification {
  id             String  @id @default(cuid())
  sendTranscript Boolean
  sendSummary    Boolean
  meetingId      String  @unique
  meeting        Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
}

model ContactMessage {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([email, isRead])
}

model EarlyAccessForm {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  company       String
  subscription  String
  paymentMethod String
  features      String[] @default([])
  message       String?
  agreeTerms    Boolean
  isVerified    Boolean  @default(false)
  status        String   @default("pending")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model JobApplication {
  id          Int                  @id @default(autoincrement())
  name        String
  email       String
  resume      String
  coverLetter String
  position    String
  status      JobApplicationStatus @default(PENDING)
  isVerified  Boolean              @default(false)
  isRead      Boolean              @default(false)
  modifiedBy  String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  @@unique([email, position])
}

model UserStorage {
  userId      String @unique
  usedStorage Int
  user        User?

  @@map("user_storage")
}

model SubscriptionPlan {
  id              String           @id @default(cuid())
  name            String
  tier            SubscriptionTier
  description     String?
  isActive        Boolean          @default(true)
  basePrice       Decimal          @db.Decimal(10, 2)
  currency        String           @default("USD")
  features        String[]
  meetingsAllowed Int
  meetingDuration Int
  storageLimit    Int
  billingPeriods  BillingPeriod
  trialDays       Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  isPublic        Boolean          @default(false)
  public          Boolean          @default(true)
  subscriptions   Subscription[]

  @@map("subscription_plans")
}

model Subscription {
  id              String             @id @default(cuid())
  userId          String
  planId          String
  status          SubscriptionStatus @default(ACTIVE)
  billingPeriod   BillingPeriod
  startDate       DateTime
  endDate         DateTime?
  trialEndsAt     DateTime?
  quantity        Int                @default(1)
  basePrice       Decimal            @db.Decimal(10, 2)
  discount        Decimal?           @db.Decimal(10, 2)
  tax             Decimal?           @db.Decimal(10, 2)
  totalPrice      Decimal            @db.Decimal(10, 2)
  currency        String             @default("USD")
  lastBillingDate DateTime?
  nextBillingDate DateTime?
  autoCanceledAt  DateTime?
  customLimits    Json?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  plan            SubscriptionPlan   @relation(fields: [planId], references: [id])
  activeUser      User               @relation("ActiveUserSubscription", fields: [userId], references: [id])
  invoices        Invoice[]

  @@unique([userId, planId, status])
  @@index([status])
  @@index([nextBillingDate])
}

model Invoice {
  id             String       @id @default(cuid())
  subscriptionId String
  number         String       @unique
  amount         Decimal      @db.Decimal(10, 2)
  tax            Decimal?     @db.Decimal(10, 2)
  total          Decimal      @db.Decimal(10, 2)
  currency       Currency     @default(USD)
  status         String
  issueDate      DateTime
  dueDate        DateTime
  paidAt         DateTime?
  paymentMethod  String?
  paymentId      String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])

  @@index([subscriptionId])
  @@map("invoices")
}

model CouponCode {
  id     String  @id @default(cuid())
  code   String  @unique
  type   String
  amount Decimal @db.Decimal(10, 2)
}

model MeetingShare {
  id           String          @id @default(cuid())
  meetingId    String
  email        String
  permission   SharePermission @default(VIEW)
  token        String          @unique
  status       String          @default("pending")
  createdBy    String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  lastAccessAt DateTime?
  meeting      Meeting         @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  @@unique([meetingId, email])
  @@index([meetingId])
  @@index([token])
  @@map("meeting_shares")
}

enum UserRole {
  ADMIN
  USER
}

enum JobApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PENDING
  CANCELED
}

enum BillingPeriod {
  MONTHLY
  QUARTERLY
  ANNUAL
  CUSTOM
}

enum Currency {
  USD
  EUR
  GBP
}

enum SubscriptionTier {
  FREE
  TRIAL
  PRO
  BUSINESS
  CUSTOM
}

enum SharePermission {
  VIEW
  EDIT
  ADMIN
}

model NewsletterSubscription {
  id        String   @id @default(cuid())
  email     String   @unique
  status    String   @default("active") // active, unsubscribed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("newsletter_subscriptions")
}

