// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  isEarlyAccess         Boolean                @default(false)
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  sessions              Session[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  meetings Meeting[]
  // Storage
  storage UserStorage? @relation(fields: [storageId], references: [userId])
  storageId String? @unique
  // subscription
  activeSubscriptions Subscription[] @relation("ActiveUserSubscription")
    
  @@map("users")

  createdAt DateTime @default(now())
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_tokens")
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("two_factor_tokens")
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Meeting {
  id              String        @id @default(cuid())
  title           String
  date            DateTime
  time            String
  duration        Float         @default(30) // in minutes
  description     String?
  provider        String
  meetingLink     String
  notification    Notification?
  status          Int           @default(1) // Possible values: 1 - "Scheduled", 2 - "In Progress", 3 - "Transcoded", 4 - "Transcribed", 5 - "Completed", 6 -  "Cancelled"
  participants    Participant[] // Participants can be deleted without affecting the Meeting
  awsSchedulerArn String? // ARN of the AWS Scheduler job
  awsJobId        String? // Unique ID of the AWS Scheduler job
  transcript      String?
  videoKey        String?
  summary         Json?
  createdBy       User          @relation(fields: [userId], references: [id])
  userId          String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Participant {
  id        String   @id @default(cuid())
  email     String
  meeting   Meeting? @relation(fields: [meetingId], references: [id], onDelete: Cascade) // Allow meeting to exist without participants
  meetingId String?
}

model Notification {
  id             String  @id @default(cuid())
  sendTranscript Boolean
  sendSummary    Boolean
  meeting        Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  meetingId      String  @unique
}

model ContactMessage {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([email, isRead])
}

model EarlyAccessForm {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  company       String
  subscription  String // Options: starter, pro, enterprise
  paymentMethod String // Options: credit_card, paypal, bank_transfer
  features      String[] @default([]) // Array of features
  message       String? // Optional field
  agreeTerms    Boolean
  isVerified    Boolean  @default(false) // Admin-specific
  status        String   @default("pending") // Options: pending, approved, rejected
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model JobApplication {
  id          Int    @id @default(autoincrement())
  name        String
  email       String
  resume      String
  coverLetter String
  position    String

  status     JobApplicationStatus @default(PENDING)
  isVerified Boolean              @default(false) // Admin-specific
  isRead     Boolean              @default(false) // Admin-specific
  modifiedBy String? // Admin-specific
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt

  @@unique([email, position])
}

enum JobApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

// subscription.prisma

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PENDING
  CANCELED
}

enum BillingPeriod {
  MONTHLY
  QUARTERLY
  ANNUAL
  CUSTOM
}

enum Currency {
  USD
  EUR
  GBP
}

enum SubscriptionTier {
  FREE
  TRIAL
  PRO
  BUSINESS
  CUSTOM
}

model UserStorage {
  userId String @unique
  usedStorage Int
  user User? @relation()

  @@map("user_storage")
}

model SubscriptionPlan {
  id          String           @id @default(cuid())
  name        String
  tier        SubscriptionTier
  description String?
  isActive    Boolean          @default(true)
  isPublic    Boolean          @default(false)
  public      Boolean          @default(true) // if false, the plan is just a draft
  
  // Pricing
  basePrice Decimal @db.Decimal(10, 2)
  currency  String  @default("USD")

  // Features and Limits
  features         String[] // Store features as JSON array
  meetingsAllowed Int
  meetingDuration  Int // in minutes
  storageLimit     Int // in GB

  // Billing settings
  billingPeriods BillingPeriod
  trialDays      Int             @default(0)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  subscriptions Subscription[]

  @@map("subscription_plans")
}

model Subscription {
  id     String @id @default(cuid())
  userId String 
  planId String

  // Core subscription data
  status        SubscriptionStatus @default(ACTIVE)
  billingPeriod BillingPeriod

  // Important dates
  startDate   DateTime
  endDate     DateTime?
  trialEndsAt DateTime?

  // Billing amounts
  quantity   Int      @default(1)
  basePrice  Decimal  @db.Decimal(10, 2)
  discount   Decimal? @db.Decimal(10, 2)
  tax        Decimal? @db.Decimal(10, 2)
  totalPrice Decimal  @db.Decimal(10, 2)
  currency   String   @default("USD")

  // Payment tracking
  lastBillingDate DateTime?
  nextBillingDate DateTime?
  autoCanceledAt DateTime?

  // Custom limits (can override plan limits)
  customLimits Json?

  // Relations
  activeUser  User?   @relation("ActiveUserSubscription", fields: [userId], references: [id])
  plan       SubscriptionPlan @relation(fields: [planId], references: [id])
  invoices   Invoice[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, planId, status]) // Ensures only one active subscription per user
  @@index([status])
  @@index([nextBillingDate])
}

model Invoice {
  id             String @id @default(cuid())
  subscriptionId String

  // Invoice details
  number   String   @unique
  amount   Decimal  @db.Decimal(10, 2)
  tax      Decimal? @db.Decimal(10, 2)
  total    Decimal  @db.Decimal(10, 2)
  currency Currency @default(USD)
  status   String // pending, paid, void, etc.

  // Dates
  issueDate DateTime
  dueDate   DateTime
  paidAt    DateTime?

  // Payment details
  paymentMethod String?
  paymentId     String? // External payment reference

  // Relations
  subscription Subscription @relation(fields: [subscriptionId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([subscriptionId])
  @@map("invoices")
}

model CouponCode {
  id   String @id @default(cuid())
  code String @unique

  // Discount details
  type     String // percentage or fixed
  amount   Decimal @db.Decimal(10, 2)
}
