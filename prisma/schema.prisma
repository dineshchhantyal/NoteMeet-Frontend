// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}

enum UserRole {
  ADMIN
  USER
} 
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  isEarlyAccess Boolean   @default(false)
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  sessions      Session[]
  isTwoFactorEnabled    Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  meetings      Meeting[]
 
  @@map("users")
}
 
model VerificationToken {
  id         String @id @default(cuid())
  email      String
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id         String @id @default(cuid())
  email      String
  token      String @unique
  expires    DateTime

  @@unique([email, token])
    @@map("password_reset_tokens")
}

model TwoFactorToken {
  id         String @id @default(cuid())
  email      String
  token      String @unique
  expires    DateTime

  @@unique([email, token])
    @@map("two_factor_tokens")
}

model TwoFactorConfirmation {
  id         String @id @default(cuid())
  userId     String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Meeting {
  id            String      @id @default(cuid())
  title         String
  date          DateTime
  time          String
  duration      Float @default(30) // in minutes
  description   String?
  provider      String
  meetingLink   String
  notification Notification? 
  status        Int      @default(1) // Possible values: 1 - "Scheduled", 2 - "In Progress", 3 - "Completed", 4 - "Cancelled"
  participants  Participant[]
  awsSchedulerArn String?  // ARN of the AWS Scheduler job
  awsJobId        String?  // Unique ID of the AWS Scheduler job
  transcript      String?
  videoKey        String?
  summary         Json?
  createdBy     User        @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Participant {
  id        String   @id @default(cuid())
  email     String
  meeting   Meeting  @relation(fields: [meetingId], references: [id])
  meetingId String
}

model Notification {
  id             String   @id @default(cuid())
  sendTranscript Boolean
  sendSummary    Boolean
  meeting        Meeting  @relation(fields: [meetingId], references: [id])
  meetingId      String @unique
  }


model ContactMessage {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String
  isRead    Boolean  @default(false)

  @@unique([email, isRead])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model EarlyAccessForm {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  company        String
  subscription   String   // Options: starter, pro, enterprise
  paymentMethod  String   // Options: credit_card, paypal, bank_transfer
  features       String[] @default([]) // Array of features
  message        String?  // Optional field
  agreeTerms     Boolean
  isVerified     Boolean  @default(false) // Admin-specific
  status         String   @default("pending") // Options: pending, approved, rejected
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}


model JobApplication {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  resume    String
  coverLetter String
  position String

  status JobApplicationStatus @default(PENDING)
  isVerified Boolean @default(false) // Admin-specific
  isRead Boolean @default(false) // Admin-specific
  modifiedBy String? // Admin-specific

  @@unique([email, position])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum JobApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}